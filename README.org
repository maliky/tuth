#+TITLE: Tuth program

* Tuth Application â€” Quickstart Guide

This document summarizes how to run and test the Tuth application in different environments.
** Getting the Code
Clone the repository and enter its directory:
#+BEGIN_SRC bash
git clone <repository-url>
cd tuth
#+END_SRC
** The apps
Here are the different applications you will find in this directory:
- Registry for documents, registrations, class rosters
- Spaces for building and room
- Academics for courses, curricula, colleges and prerequisites
- Timetable for reservations, semesters & schedule definitions
- People for role and user profile  
- Finance for payments, scholarships and financial records.

** Running Locally without Docker
For a quick local setup using SQLite, run:
#+BEGIN_SRC bash
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp env-test .env
python manage.py migrate
python manage.py populate_initial_data
python manage.py runserver
#+END_SRC

** Running Locally without Docker
For a quick local setup using SQLite, run:
#+BEGIN_SRC bash
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp env-test .env
python manage.py migrate
python manage.py populate_initial_data
python manage.py runserver
#+END_SRC
Open http://127.0.0.1:8000 in your browser.


** Development Environment
To make changes :
- Create a new branch from `dev` or switch to the `dev` branch
- Make your changes
If you add Python libraries using `pip install ...`,
 - add them to `requirements-dev.txt`
#+BEGIN_SRC bash  
echo "xyz" > requirements-dev.txt
#+END_SRC
- Run code checks: 
#+BEGIN_SRC python
black app/ && flake8 app/ && mypy app/
#+END_SRC
*** Tests
Install dependencies from `requirements-dev.txt` and `requirements-test.txt` before running tests.
You can run `./run.sh -m` to start a fresh test on the local machine.
In a second terminal populate your DB with a file having this structure:
#+BEGIN_VERBATIM
academic_year: 25-26
semester: 1 
college: CAFS
course_code: AGR
course_no: 121
course_long_code: AGR121-CAFS
course_title: Practicum I
credit_hours: 1
curriculum: Bsc Agriculture
section: 1
location: SAPEC-SAPEC
space: SAPEC
room: SAPEC
faculty: Prof A
weekday: Friday
start_time: 9:00
end_time: 10:00
#+END_VERBATIM
Check the `run.sh` script to see where to put the file.

*** Launch your docker-compose dev environment
Build and start the dev stack:
#+BEGIN_SRC bash
docker-compose -f docker-compose-dev.yml up --build
#+END_SRC
Once the containers are running, visit [[https://localhost][https://localhost]] to access the app.

*** Running Tests
**** Using Docker

Run tests within the dev container:

#+BEGIN_SRC bash
docker-compose -f docker-compose-dev.yml run --rm web pytest tests/
#+END_SRC

Access the application at [[https://localhost][https://localhost]]

**** Without Docker (Linux)

Load the environment variables from your local `.env` file, then run pytest:

#+BEGIN_SRC bash
export $(grep -v '^#' .env | xargs)  # load variables
pytest tests/
#+END_SRC

*** Restart from a clean state
#+BEGIN_SRC bash term2
  docker-compose -f docker-compose-dev.yml down -v
  sudo rm app/migrations/*
#+END_SRC

In another terminal,
#+BEGIN_SRC bash term2
   docker-compose -f docker-compose-dev.yml up --build
#+END_SRC

#+BEGIN_SRC bash  term3
    docker-compose -f docker-compose-dev.yml exec web python manage.py makemigrations app
    docker-compose -f docker-compose-dev.yml exec web python manage.py migrate
    docker-compose -f docker-compose-dev.yml exec web python manage.py populate_initial_data
#+END_SRC



** Production Environment

Build and launch the production environment:

#+begin_src bash
docker-compose -f docker-compose-prod.yml up --build -d
#+end_src

- Ensure that your production `.env-prod` file is configured and secure.

Access the application via your production URL (e.g., [[https://tuth.koba.sarl][https://tuth.koba.sarl]]).

** Data Import/Export

Several admin screens expose Import and Export buttons powered by
the =django-import-export= package. Use these buttons to upload CSV
or XLSX files and to download existing records. Models such as
Courses, Curricula and Sections already provide corresponding
resources.


** Importing a full workbook
Use ``import_workbook`` to load an Excel file containing
``timetable``, ``academics``, ``people`` and ``spaces`` sheets.

# +begin_src bash
python manage.py import_workbook myfile.xlsx --dry-run
# +end_src
Run the command without ``--dry-run`` to persist changes.
